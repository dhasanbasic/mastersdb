/*
 * MQL.ATG
 *
 * MastersDB query language (MQL) grammar description for Coco/R
 *
 * Copyright (C) 2010, Dinko Hasanbasic (dinkoh@bih.net.ba)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 * Revision history
 * ----------------
 * 22.07.2010
 *  Initial version of file.
 * 12.08.2010
 *  Added rules for CREATE TABLE statement.
 * 13.08.2010
 *  Added rules for INSERT INTO statement.
 * 14.08.2010
 *  Changed the special character set.
 * 15.08.2010
 *  Added the getOffset method.
 *  Added rules for DESC statement.
 * 16.08.2010
 *  Added rules for SELECT.
 */

extern "C" {
  #include "../mastersdb.h"
}

#include "../mdbvm/MastersDBVM.h"
#include "MQLSelect.h"

#include <string>

using namespace MDB;
using namespace std;

COMPILER MQL

static const uint32 BUFFER_SIZE = 1024;
char buf[BUFFER_SIZE];
MastersDBVM *VM;
MQLSelect *select;

uint16 dp;
uint16 tp;

string* TokenToString()
{
  wcstombs(buf, t->val, BUFFER_SIZE);
  return new string(buf);
}

uint32 getOffset(const void* src, const void* dest)
{
  return (uint32)((char*)dest - (char*)src);
}

void setVM (MastersDBVM *vm)
{
  VM = vm;
}

void setSelect (MQLSelect *select)
{
  this->select = select;
}

/* ignores case */
IGNORECASE

/* defines the character sets */
CHARACTERS

  /* Special characters in identifiers: Č Ć Đ Š Ž Ä Ö Ü č ć đ š ž ä ö ü */
  special           = '\u010c' + '\u0106' + '\u0110' + '\u0160' + '\u017d'
                    + '\u00c4' + '\u00d6' + '\u00dc' + '\u010d' + '\u0107'
                    + '\u0111' + '\u0161' + '\u017e' + '\u00e4' + '\u00f6'
                    + '\u00fc'.
  /* Whitespace */
  whitespace        = '\u0009' .. '\u000d' + '\u0020'.
  
  /* "Quotes" and 'Apostrophe' strings */
  qstr              = ANY - '\\' - '\"'.
  astr              = ANY - '\\' - '\''.
  
  /* Digits, operators and identifier letters */
  digit             = "0123456789".
  operator          = "<=>".
  letter            = 'A' .. 'Z' + 'a' .. 'z' + special.
/* defines the tokens */
TOKENS
  NUMBER	        = digit {digit}.
  IDENTIFIER        = letter {letter}.
  COLUMN            = letter {letter} '.' letter {letter}.
  STRING            = '\"' { qstr | '\\' '\'' } '\"' |
                      '\'' { astr | '\\' '\"' } '\''.
  OPERATOR          = operator | "<=" | ">=" | "<>".

/* defines the comments */
COMMENTS FROM "/*" TO "*/"

IGNORE whitespace

/* defines the productions */
PRODUCTIONS

/*
 * MastersDB Query Language
 */

MQL =
  ( MQLCreateStatement
  | MQLInsertStatement
  | MQLDescribeStatement
  | MQLSelectStatement )
  ';'                      (. VM->AddInstruction(MastersDBVM::HALT,        .)
                           (.   MastersDBVM::MVI_SUCCESS);                 .).

/*
 * CREATE TABLE
 */

MQLCreateStatement =       (. string *s;       .)
                           (. char *name;      .)
                           (. uint16* data;    .)
                           (. uint16 num_cols; .)
                           (. uint16 ncp;      .)
                           (. dp = 0;          .)
                           (. tp = 0;          .)
  "CREATE" "TABLE"
  
  IDENTIFIER               (. VM->AddInstruction(MastersDBVM::SETTBL, tp); .)
  						   (. s = TokenToString();                         .)
                           (. name = new char[s->length() + 4];            .)
                           (. *((uint32*)name) = s->length();              .)
                           (. strcpy(name + 4, s->c_str());                .)
                           (. delete s;                                    .)
                           (. ncp = dp++;                                  .)
                           (. VM->AddInstruction(MastersDBVM::PUSHM, ncp); .)
                           (. VM->AddInstruction(MastersDBVM::NEWTBL, dp); .)
                           (. VM->StoreData(name, dp++);                   .)
                           
  '('                      (. num_cols = 0;                                .)
  MQLAttributes<num_cols>            
                           (. data = new uint16;                           .)
                           (. *data = num_cols;                            .)
                           (. VM->StoreData((char*)data, ncp);             .)
  ')'
                           (. VM->AddInstruction(MastersDBVM::CRTTBL, tp); .).

/*
 * MQL attributes
 */

MQLAttributes<uint16 &n> = (. mdbColumnRecord *c;                          .)
                           (. n = 0;                                       .)
                           
  MQLAttribute<c>          (. VM->AddInstruction(MastersDBVM::NEWCOL, dp); .)
                           (. VM->StoreData((char*)c, dp++);               .)
                           (. n++;                                         .)
                           
  {                        (. VM->AddInstruction(MastersDBVM::NEWCOL, dp); .)
  ',' MQLAttribute<c>         
                           (. VM->StoreData((char*)c, dp++);               .)
                           (. n++;                                         .)
  }.

/*
 * MQL attribute
 */

MQLAttribute<mdbColumnRecord* &c> =  (. c = new mdbColumnRecord;           .) 
                                     (. string *s;                         .)

  IDENTIFIER               (. s = TokenToString();                         .)
                           (. *((uint32*)c->name) = s->length();           .)
                           (. strcpy(c->name + 4, s->c_str());             .)
                           (. delete s;                                    .)
                           
  MQLDatatype<c>           (. c->length = 0;                               .)
  
  {
  '('
      NUMBER               (. s = TokenToString();                         .)
                           (. c->length = atoi(s->c_str());                .)
                           (. delete s;                                    .)
  ')'
  }.

/*
 * MQL data type
 */

MQLDatatype<mdbColumnRecord *c> =

    "INT-8"      (. c->type = 0; .)
  | "INT-16"     (. c->type = 1; .)
  | "INT-32"     (. c->type = 2; .)
  | "FLOAT"      (. c->type = 3; .)
  | "STRING"     (. c->type = 4; .).

/*
 * INSERT INTO
 */

MQLInsertStatement =       (. string *s;       .)
                           (. char *name;      .)
                           (. dp = 0;          .)
                           (. tp = 0;          .)
  "INSERT" "INTO"

  IDENTIFIER               (. VM->AddInstruction(MastersDBVM::SETTBL, tp); .)
  						   (. s = TokenToString();                         .)
                           (. name = new char[s->length() + 4];            .)
                           (. *((uint32*)name) = s->length();              .)
                           (. strcpy(name + 4, s->c_str());                .)
                           (. delete s;                                    .)
                           (. VM->AddInstruction(MastersDBVM::LDTBL, dp);  .)
                           (. VM->StoreData(name, dp++);                   .)
  "VALUES"
  '(' MQLValues ')'
                           (. VM->AddInstruction(MastersDBVM::INSREC, tp); .).

/*
 * MQLValues
 */

MQLValues = MQLValue { ',' MQLValue }.

/*
 * MQLValue
 */
MQLValue =                 (. string *s;                                   .)
                           (. char *data;                                  .)
  (
    NUMBER                 (. s = TokenToString();                         .)
                           (. data = (char*)(new uint32);                  .)
                           (. *data = atoi(s->c_str());                    .)
  |
    STRING                 (. s = TokenToString();                         .)
                           (. data = new char[s->length() + 4];            .)
                           (. *((uint32*)data) = s->length() - 2;          .)
                           (. strncpy(data+4,s->c_str()+1,s->length()-2);  .)
  )
                           (. VM->AddInstruction(MastersDBVM::INSVAL, dp); .)
                           (. VM->StoreData(data, dp++);                   .)
                           (. delete s;                                    .).

/*
 * DESC
 */

MQLDescribeStatement =     (. string *s;       .)
                           (. char *name;      .)
                           (. dp = 0;          .)
                           (. tp = 0;          .)
  ("DESC" | "DESCRIBE")

  IDENTIFIER               (. VM->AddInstruction(MastersDBVM::SETTBL, tp); .)
  						   (. s = TokenToString();                         .)
                           (. name = new char[s->length() + 4];            .)
                           (. *((uint32*)name) = s->length();              .)
                           (. strcpy(name + 4, s->c_str());                .)
                           (. delete s;                                    .)
                           (. VM->AddInstruction(MastersDBVM::LDTBL, dp);  .)
                           (. VM->StoreData(name, dp++);                   .)
                           (. VM->AddInstruction(MastersDBVM::DSCTBL, tp); .).

/*
 * SELECT
 */

MQLSelectStatement =       (. dp = 0;          .)
                           (. tp = 0;          .)
                           (. select->Reset(); .)

  "SELECT" MQLColumns "FROM" MQLTables
                           (. select->setDataPointer(dp);                  .)
                           (. select->GenerateBytecode();                  .).

/*
 * MQLColumns
 */
MQLColumns =
  '*'                      (. select->UseAllColumns();                     .)
  |
  MQLColumn {',' MQLColumn}.

/*
 * MQLColumn
 */
MQLColumn =                (. string *table = NULL;  .)
                           (. string *column = NULL; .)
                           (. string *tmp = NULL;    .)
                           (. uint32 dot;            .)

  ( COLUMN                 (. tmp = TokenToString();                       .)
                           (. dot = tmp->find('.');                        .)
                           (. table = new string(tmp->c_str(),dot);        .)
                           (. column = new string(tmp->c_str()+dot+1);     .)
  |  
    IDENTIFIER             (. column = TokenToString();                    .)
  )
                           (. if (select->MapColumn(column, table, dp))    .)
                           (. {                                            .)
                           (.   dp++;                                      .)
                           (. };                                           .)
                           (. delete table;                                .)
                           (. delete column;                               .)
                           (. delete tmp;                                  .).

/*
 * MQLTables
 */
MQLTables = MQLTable {',' MQLTable}.

/*
 * MQLTable
 */
MQLTable =                 (. string *table = NULL; .)

  IDENTIFIER               (. table = TokenToString();                     .)
                           (. select->MapTable(table, tp);                 .)
                           (. tp++;                                        .)
                           (. delete table;                                .).

END MQL.
