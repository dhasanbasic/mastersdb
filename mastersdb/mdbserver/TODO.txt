-----------------------------------
  TODO list for MastersDB project
-----------------------------------
                      Copyright (C) 2010, Dinko Hasanbasic (dinkoh@bih.net.ba)

General
-------    
  * implement support for following data types (sorted by name length):
    ** NAME     NAME  HEADER  SIZE (B)  COMPARISON FUNCTION
       INT      3     0       1         Standard C -> memcmp
       LONG     4     0       2         Standard C -> memcmp
       UTF8     4     4       N*1 + 4   Standard C -> strncmp
       FLOAT    5     0       4         assembly   -> CompareFloat
       UTF16    5     4       N*2 + 4   Standard C -> CompareUnicode
       
    ** design and implement the missing type comparison functions:
      - mdbCompareFloat

  * design a file format for storing many B-trees
    # 260 Bytes header
      - MastersDB magic number                          (  2 bytes)
      - MastersDB version                               (  2 bytes)
      - 16 entry B-tree descriptor table                ( 64 bytes)
      - 32 entry free blocks table (6 bytes each)       (192 bytes)
    # B-tree descriptors and nodes

Optimizations
-------------
  * General
    - Assume preallocated BtreeNode structures in ReadNode/WriteNode
      implementations.
            
  * btree.c:
    - Use binary search during insert/delete, instead of sequential.
    - Write iterative versions of insert/delete.

Ideas
-----
  * btree.h, btree.c
    - Instead of using unsigned long as child pointer to a node, use void*,
      store the child pointer size in the Btree structure and let ReadNode/
      WriteNode take care of what to do with that pointer. With such
      implementation, in-memory and in-file B-trees can be easier implemented.
